url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("40", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
#data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
#data$fechas = floor_date(data$fechas, "5 mins")
#data2 = data %>%
#group_by(fechas) %>%
#dplyr::summarise(muestra = mean(muestra))
}
get_lluvia = function() {
lluvia = list()
# Guardamos en lista de listas todos los datasets de las estaciones
# para una territorial en particular
for (i in 1:nrow(estaciones_pluvio)) {
estacion = estaciones_pluvio$codigo[i]
lluvia[[i]] = get_data(estacion, comenzar, finalizar)
}
# Agregamos una columna de municipios a cada dataframe de la lista
for (i in 1:length(lluvia)) {
if (nrow(lluvia[[i]]) > 0) {
lluvia[[i]] = data.frame(lluvia[[i]],
municipios = estaciones_pluvio[i,4],
ubicación = estaciones_pluvio[i,11])
}
}
#Para eliminar listas con 0 filas
lluvia = lluvia[sapply(lluvia, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
lluvia = do.call(rbind, lluvia)
}
lluvia = get_lluvia()
View(lluvia)
#Agrupamos por municipios y hallamos su acumulado para la temporalidad dada
lluvia2 = lluvia %>%
group_by(municipios, ubicación) %>%
dplyr::summarise(muestra = sum(muestra))
View(lluvia2)
comenzar = "2020-12-20"
finalizar = "2020-12-27"
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo",
municipio == "Girardota")
#Creamos categorías únicas para municipios
estaciones_pluvio$municipio = make.names(estaciones_pluvio[,4], unique = TRUE)
get_data = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/precipitacion/40?date_estacion__gte=2020-11-17&date_estacion__lt=2020-11-23&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("40", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
#data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
#data$fechas = floor_date(data$fechas, "5 mins")
#data2 = data %>%
#group_by(fechas) %>%
#dplyr::summarise(muestra = mean(muestra))
}
get_lluvia = function() {
lluvia = list()
# Guardamos en lista de listas todos los datasets de las estaciones
# para una territorial en particular
for (i in 1:nrow(estaciones_pluvio)) {
estacion = estaciones_pluvio$codigo[i]
lluvia[[i]] = get_data(estacion, comenzar, finalizar)
}
# Agregamos una columna de municipios a cada dataframe de la lista
for (i in 1:length(lluvia)) {
if (nrow(lluvia[[i]]) > 0) {
lluvia[[i]] = data.frame(lluvia[[i]],
municipios = estaciones_pluvio[i,4],
ubicación = estaciones_pluvio[i,11])
}
}
#Para eliminar listas con 0 filas
lluvia = lluvia[sapply(lluvia, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
lluvia = do.call(rbind, lluvia)
}
lluvia = get_lluvia()
#Agrupamos por municipios y hallamos su acumulado para la temporalidad dada
lluvia2 = lluvia %>%
group_by(municipios, ubicación) %>%
dplyr::summarise(muestra = sum(muestra))
View(lluvia2)
library(tidyverse)
library(urltools)
library(lubridate)
library(dplyr)
options(timeout=500)
options(scipen=999)
comenzar = "2010-01-01"
finalizar = "2021-12-17"
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo")
get_data = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/precipitacion/40?date_estacion__gte=2020-11-17&date_estacion__lt=2020-11-23&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("40", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
data2 = data
}
lluvia = list() # Creamos una lista vacía
get_lluvia = function() {
lluvia = list()
# Guardamos en lista de listas todos los datasets de las estaciones
# para una territorial en particular
for (i in 1:nrow(estaciones_pluvio)) {
estacion = estaciones_pluvio$codigo[i]
lluvia[[i]] = get_data(estacion, comenzar, finalizar)
}
# Agregamos una columna de municipios a cada dataframe de la lista
for (i in 1:length(lluvia)) {
if (nrow(lluvia[[i]]) > 0) {
lluvia[[i]] = data.frame(lluvia[[i]],
territorial = estaciones_pluvio[i,5],
municipios = estaciones_pluvio[i,4],
ubicacion = estaciones_pluvio[i,11],
muniCodi = estaciones_limni[i,17],)
}
}
#Para eliminar listas con 0 filas
lluvia = lluvia[sapply(lluvia, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
lluvia = do.call(rbind, lluvia)
}
lluvia = get_lluvia()
library(tidyverse)
library(urltools)
library(lubridate)
library(dplyr)
library(tidyverse)
library(urltools)
library(lubridate)
library(dplyr)
options(timeout=1000)
lluvia = list() # Creamos una lista vacía
get_lluvia = function() {
lluvia = list()
# Guardamos en lista de listas todos los datasets de las estaciones
# para una territorial en particular
for (i in 1:nrow(estaciones_pluvio)) {
estacion = estaciones_pluvio$codigo[i]
lluvia[[i]] = get_data(estacion, comenzar, finalizar)
}
# Agregamos una columna de municipios a cada dataframe de la lista
for (i in 1:length(lluvia)) {
if (nrow(lluvia[[i]]) > 0) {
lluvia[[i]] = data.frame(lluvia[[i]],
territorial = estaciones_pluvio[i,5],
municipios = estaciones_pluvio[i,4],
ubicacion = estaciones_pluvio[i,11],
muniCodi = estaciones_limni[i,17],)
}
}
#Para eliminar listas con 0 filas
lluvia = lluvia[sapply(lluvia, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
lluvia = do.call(rbind, lluvia)
}
lluvia = get_lluvia()
options(timeout=2000)
lluvia = get_lluvia()
library(tidyverse)
library(urltools)
library(lubridate)
library(dplyr)
options(timeout=2000)
options(scipen=999)
rm(list = ls())
comenzar = "2010-01-01"
finalizar = "2021-12-17"
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo")
get_data = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/precipitacion/40?date_estacion__gte=2020-11-17&date_estacion__lt=2020-11-23&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("40", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
data2 = data
}
lluvia = list() # Creamos una lista vacía
get_lluvia = function() {
lluvia = list()
# Guardamos en lista de listas todos los datasets de las estaciones
# para una territorial en particular
for (i in 1:nrow(estaciones_pluvio)) {
estacion = estaciones_pluvio$codigo[i]
lluvia[[i]] = get_data(estacion, comenzar, finalizar)
}
# Agregamos una columna de municipios a cada dataframe de la lista
for (i in 1:length(lluvia)) {
if (nrow(lluvia[[i]]) > 0) {
lluvia[[i]] = data.frame(lluvia[[i]],
territorial = estaciones_pluvio[i,5],
municipios = estaciones_pluvio[i,4],
ubicacion = estaciones_pluvio[i,11],
muniCodi = estaciones_limni[i,17],)
}
}
#Para eliminar listas con 0 filas
lluvia = lluvia[sapply(lluvia, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
lluvia = do.call(rbind, lluvia)
}
lluvia = get_lluvia()
options(timeout=20000)
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", municipio %in% -c("Girardota"))
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", municipio %in% c("Girardota"))
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
# Filtramos por territoriales (cambiar territorial en filter):
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", municipio %in% (-c("Girardota")))
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", municipio %in% !c("Girardota"))
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", municipio != "Girardota")
library(tidyverse)
library(urltools)
library(lubridate)
library(dplyr)
options(timeout=20000)
comenzar = "2010-01-01"
finalizar = "2021-12-17"
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", municipio != "Girardota")
get_data = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/precipitacion/40?date_estacion__gte=2020-11-17&date_estacion__lt=2020-11-23&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("40", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
data2 = data
}
lluvia = list() # Creamos una lista vacía
get_lluvia = function() {
lluvia = list()
# Guardamos en lista de listas todos los datasets de las estaciones
# para una territorial en particular
for (i in 1:nrow(estaciones_pluvio)) {
estacion = estaciones_pluvio$codigo[i]
lluvia[[i]] = get_data(estacion, comenzar, finalizar)
}
# Agregamos una columna de municipios a cada dataframe de la lista
for (i in 1:length(lluvia)) {
if (nrow(lluvia[[i]]) > 0) {
lluvia[[i]] = data.frame(lluvia[[i]],
territorial = estaciones_pluvio[i,5],
municipios = estaciones_pluvio[i,4],
ubicacion = estaciones_pluvio[i,11],
muniCodi = estaciones_limni[i,17],)
}
}
#Para eliminar listas con 0 filas
lluvia = lluvia[sapply(lluvia, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
lluvia = do.call(rbind, lluvia)
}
lluvia = get_lluvia()
View(estaciones_pluvio)
library(tidyverse)
library(urltools)
library(lubridate)
library(dplyr)
options(timeout=20000)
options(scipen=999)
rm(list = ls())
comenzar = "2010-01-01"
finalizar = "2021-12-17"
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
estaciones$muniCodi = as.character(paste(estaciones$municipio, estaciones$codigo))
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", municipio != "Girardota")
get_data = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/precipitacion/40?date_estacion__gte=2020-11-17&date_estacion__lt=2020-11-23&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("40", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
data2 = data
}
lluvia = list() # Creamos una lista vacía
get_lluvia = function() {
lluvia = list()
# Guardamos en lista de listas todos los datasets de las estaciones
# para una territorial en particular
for (i in 1:nrow(estaciones_pluvio)) {
estacion = estaciones_pluvio$codigo[i]
lluvia[[i]] = get_data(estacion, comenzar, finalizar)
}
# Agregamos una columna de municipios a cada dataframe de la lista
for (i in 1:length(lluvia)) {
if (nrow(lluvia[[i]]) > 0) {
lluvia[[i]] = data.frame(lluvia[[i]],
territorial = estaciones_pluvio[i,5],
municipios = estaciones_pluvio[i,4],
ubicacion = estaciones_pluvio[i,11],
muniCodi = estaciones_pluvio[i,17],)
}
}
#Para eliminar listas con 0 filas
lluvia = lluvia[sapply(lluvia, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
lluvia = do.call(rbind, lluvia)
}
lluvia = get_lluvia()
View(estaciones_pluvio)
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", municipio = "Barbosa")
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", municipio == "Barbosa")
lluvia = list() # Creamos una lista vacía
lluvia = get_lluvia()
get_lluvia = function() {
lluvia = list()
# Guardamos en lista de listas todos los datasets de las estaciones
# para una territorial en particular
for (i in 1:nrow(estaciones_pluvio)) {
estacion = estaciones_pluvio$codigo[i]
lluvia[[i]] = get_data(estacion, comenzar, finalizar)
}
# Agregamos una columna de municipios a cada dataframe de la lista
for (i in 1:length(lluvia)) {
if (nrow(lluvia[[i]]) > 0) {
lluvia[[i]] = data.frame(lluvia[[i]],
territorial = estaciones_pluvio[i,5],
municipios = estaciones_pluvio[i,4],
ubicacion = estaciones_pluvio[i,11],
muniCodi = estaciones_pluvio[i,17])
}
}
#Para eliminar listas con 0 filas
lluvia = lluvia[sapply(lluvia, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
lluvia = do.call(rbind, lluvia)
}
lluvia = get_lluvia()
View(lluvia)
library(tidyverse)
library(urltools)
library(lubridate)
library(dplyr)
options(timeout=20000)
options(scipen=999)
rm(list = ls())
comenzar = "2010-01-01"
finalizar = "2021-12-17"
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
estaciones$muniCodi = as.character(paste(estaciones$municipio, estaciones$codigo))
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", municipio != "Girardorta")
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", municipio != "Girardorta")
View(estaciones_pluvio)
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", municipio =! "Girardorta")
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", municipio != "Girardorta")
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
estaciones$muniCodi = as.character(paste(estaciones$municipio, estaciones$codigo))
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", municipio != "Girardorta")
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", municipio != "Girardota")
get_data = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/precipitacion/40?date_estacion__gte=2020-11-17&date_estacion__lt=2020-11-23&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("40", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
data2 = data
}
lluvia = list() # Creamos una lista vacía
get_lluvia = function() {
lluvia = list()
# Guardamos en lista de listas todos los datasets de las estaciones
# para una territorial en particular
for (i in 1:nrow(estaciones_pluvio)) {
estacion = estaciones_pluvio$codigo[i]
lluvia[[i]] = get_data(estacion, comenzar, finalizar)
}
# Agregamos una columna de municipios a cada dataframe de la lista
for (i in 1:length(lluvia)) {
if (nrow(lluvia[[i]]) > 0) {
lluvia[[i]] = data.frame(lluvia[[i]],
territorial = estaciones_pluvio[i,5],
municipios = estaciones_pluvio[i,4],
ubicacion = estaciones_pluvio[i,11],
muniCodi = estaciones_pluvio[i,17])
}
}
#Para eliminar listas con 0 filas
lluvia = lluvia[sapply(lluvia, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
lluvia = do.call(rbind, lluvia)
}
lluvia = get_lluvia()
View(estaciones_pluvio)
library(tidyverse)
library(urltools)
library(lubridate)
library(dplyr)
options(timeout=20000)
options(scipen=999)
rm(list = ls())
comenzar = "2010-01-01"
finalizar = "2021-12-17"
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
estaciones$muniCodi = as.character(paste(estaciones$municipio, estaciones$codigo))
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo", territorial %in%
c("Tahamíes", "Zenufaná"))
get_data = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/precipitacion/40?date_estacion__gte=2020-11-17&date_estacion__lt=2020-11-23&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("40", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
data2 = data
}
lluvia = list() # Creamos una lista vacía
get_lluvia = function() {
lluvia = list()
# Guardamos en lista de listas todos los datasets de las estaciones
# para una territorial en particular
for (i in 1:nrow(estaciones_pluvio)) {
estacion = estaciones_pluvio$codigo[i]
lluvia[[i]] = get_data(estacion, comenzar, finalizar)
}
# Agregamos una columna de municipios a cada dataframe de la lista
for (i in 1:length(lluvia)) {
if (nrow(lluvia[[i]]) > 0) {
lluvia[[i]] = data.frame(lluvia[[i]],
territorial = estaciones_pluvio[i,5],
municipios = estaciones_pluvio[i,4],
ubicacion = estaciones_pluvio[i,11],
muniCodi = estaciones_pluvio[i,17])
}
}
#Para eliminar listas con 0 filas
lluvia = lluvia[sapply(lluvia, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
lluvia = do.call(rbind, lluvia)
}
lluvia = get_lluvia()
gc()
unlink('Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
setwd("~/Descargas/Info_mark")
